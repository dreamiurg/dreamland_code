# FIXME: Temporary hack to see if we can avoid having real config.h generated by automake
configure_file(${CMAKE_SOURCE_DIR}/src/autoflags-cmake.h.in ${CMAKE_BINARY_DIR}/src/autoflags.h)
configure_file(${CMAKE_SOURCE_DIR}/src/config-cmake.h.in ${CMAKE_BINARY_DIR}/src/config.h)

# Build all libraries
add_subdirectory(alloc)
add_subdirectory(flags)
add_subdirectory(io)
add_subdirectory(l10n)
add_subdirectory(util)
add_subdirectory(core)

# Consolidate all include directories
get_target_property(LIB_ALLOC_INCLUDES alloc INCLUDE_DIRECTORIES)
get_target_property(LIB_FLAGS_INCLUDES flags INCLUDE_DIRECTORIES)
get_target_property(LIB_L10N_INCLUDES l10n INCLUDE_DIRECTORIES)
get_target_property(LIB_UTIL_INCLUDES util INCLUDE_DIRECTORIES)
get_target_property(LIB_IO_INCLUDES io INCLUDE_DIRECTORIES)



# Build main executable
add_executable(${PROJECT_NAME}
        main.cpp
        dreamland.cpp
        )

target_include_directories(${PROJECT_NAME} PUBLIC
        ${CMAKE_CURRENT_BINARY_DIR}
        ${CMAKE_CURRENT_SOURCE_DIR}
        ${LIB_ALLOC_INCLUDES}
        ${LIB_FLAGS_INCLUDES}
        ${LIB_L10N_INCLUDES}
        ${LIB_UTIL_INCLUDES}
        ${LIB_IO_INCLUDES}
        #        ${CMAKE_CURRENT_SOURCE_DIR}/alloc
        #        ${CMAKE_CURRENT_SOURCE_DIR}/core
        #        ${CMAKE_CURRENT_SOURCE_DIR}/flags
        #        ${CMAKE_CURRENT_SOURCE_DIR}/lang
        #        ${CMAKE_CURRENT_SOURCE_DIR}/io
        #        ${CMAKE_CURRENT_SOURCE_DIR}/util
        #        ${CMAKE_CURRENT_SOURCE_DIR}/xml
        #        ${CMAKE_CURRENT_SOURCE_DIR}/plugin
        #        ${CMAKE_CURRENT_SOURCE_DIR}/core/scheduler
        #        ${CMAKE_CURRENT_SOURCE_DIR}/scheduler
        #        ${CMAKE_CURRENT_SOURCE_DIR}/gref
        #        ${CMAKE_CURRENT_SOURCE_DIR}/l10n
        #        ${CMAKE_CURRENT_SOURCE_DIR}/core/skills
        )

target_link_directories(${PROJECT_NAME} PUBLIC
        lang
        util
        )

